#!/usr/bin/python
#-*- coding: utf-8 -*-

# =========================================================================
#   Program:   iota2
#
#   Copyright (c) CESBIO. All rights reserved.
#
#   See LICENSE for details.
#
#   This software is distributed WITHOUT ANY WARRANTY; without even
#   the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE.  See the above copyright notices for more information.
#
# =========================================================================

import os
import logging
import shutil

from Common import OtbAppBank
from Common import FileUtils as fut

logger = logging.getLogger(__name__)


def GetAugmentationSamplesParameters(IOTA2_dir):
    """ read the /learningSample directory

    parse the directory /learningSamples and return a list of all sqlite files

    Parameter
    ---------

    IOTA2_dir : string
        absolute path to the IOTA2's directory

    Example
    -------

    >>> ls /IOTA2/learningSamples
    Samples_region_2_seed0_learn.sqlite
    Samples_region_2_seed1_learn.sqlite
    Samples_region_1_seed0_learn.sqlite
    Samples_region_1_seed1_learn.sqlite

    >>> GetAugmentationSamplesParameters("/IOTA2")
        [Samples_region_1_seed0_learn.sqlite, Samples_region_2_seed0_learn.sqlite,
         Samples_region_1_seed1_learn.sqlite, Samples_region_2_seed1_learn.sqlite]

    Return
    ------
    list
        a list of sqlite files containing samples
    """
    IOTA2_dir_learningSamples = os.path.join(IOTA2_dir, "learningSamples")
    return fut.FileSearch_AND(IOTA2_dir_learningSamples, True, ".sqlite")


def GetRegionFromSampleName(samples):
    """
    """
    region_pos = 2
    return os.path.basename(samples).split("_")[region_pos]


def SamplesAugmentationCounter(class_count, mode, atleast_num=None, byclass=None):
    """
    
    Parameters
    ----------
    class_count : dict
        count by class
    mode : string
        atLeast/balance/byClass
    atleast_num : int
        vector should have 'atleast' class samples
    byclass : string
        csv path
    
    Return
    ------
    dict
        by class, the number of samples to add in the samples set.
    """
    augmented_class = {}
    if mode.lower() == "atleast":
        for class_name, count in class_count.items():
            if count < atleast_num:
                augmented_class[class_name] = atleast_num - count

    elif mode.lower() == "balance":
        max_class_count = class_count[max(class_count, key=lambda key: class_count[key])]
        for class_name, count in class_count.items():
            if count < max_class_count:
                augmented_class[class_name] = max_class_count - count

    elif mode.lower() == "byclass":
        import csv
        with open(byclass, 'rb') as csvfile:
            csv_reader = csv.reader(csvfile)
            for class_name, class_samples in csv_reader:
                class_name = int(class_name)
                class_samples = int(class_samples)
                if class_samples > class_count[class_name]:
                    augmented_class[class_name] = class_samples - class_count[class_name]
    return augmented_class


def Augmentation(samples, class_augmentation, strategy, field, 
                 excluded_fields=[], Jstdfactor=None, Sneighbors=None,
                 workingDirectory=None, logger=logger):
    """perform samples augmentation according to input parameters
    
    Parameters
    ----------

    samples : string
        path to the set of samples to augment (geometry must be 'POINT')
    class_augmentation : dict
        number of new samples to compute by class
    strategy : string
        which method to use in order to perform data augmentation (replicate/jitter/smote)
    field : string 
        data's field
    excluded_fields : list
        do not consider these fields to perform data augmentation
    Jstdfactor : float
        Factor for dividing the standard deviation of each feature
    Sneighbors : int
        Number of nearest neighbors (smote's method)
    workingDirectory : string
        path to a working directory

    Note
    ----
    More documentation about dataAugmentation here :
    http://www.orfeo-toolbox.org/Applications/SampleAugmentation.html
    """
    from Common import OtbAppBank

    samples_dir_o, samples_name = os.path.split(samples)
    samples_dir = samples_dir_o
    if workingDirectory:
        samples_dir = workingDirectory
        shutil.copy(samples, samples_dir)
    samples = os.path.join(samples_dir, samples_name) 

    augmented_files = []
    for class_name, class_samples_augmentation in class_augmentation.items():
        logger.info("{} samples of class {} will be generated by data augmentation ({} method) in {}".format(class_samples_augmentation,
                                                                                                             class_name,
                                                                                                             strategy, samples))
        sample_name_augmented = "_".join([os.path.splitext(samples_name)[0],
                                          "aug_class_{}.sqlite".format(class_name)])
        output_sample_augmented = os.path.join(samples_dir, sample_name_augmented)
        parameters = {"in": samples,
                      "field": field,
                      "out": output_sample_augmented,
                      "label": class_name,
                      "strategy": strategy,
                      "samples": class_samples_augmentation
                      }
        if excluded_fields:
            parameters["exclude"] = excluded_fields
        if strategy.lower() == "jitter":
            parameters["strategy.jitter.stdfactor"] = Jstdfactor
        elif strategy.lower() == "smote":
            parameters["strategy.smote.neighbors"] = Sneighbors
        augmentation_application = OtbAppBank.CreateSampleAugmentationApplication(parameters)
        augmentation_application.ExecuteAndWriteOutput()
        logger.debug("{} samples of class {} were added in {}".format(class_samples_augmentation,
                                                                      class_name, samples))
        augmented_files.append(output_sample_augmented)

    outputVector = os.path.join(samples_dir, "_".join([os.path.splitext(samples_name)[0],
                                                       "augmented.sqlite"]))

    fut.mergeSQLite("_".join([os.path.splitext(samples_name)[0], "augmented"]),
                    samples_dir, [samples] + augmented_files)

    shutil.move(outputVector, os.path.join(samples_dir_o, samples_name))

    #clean-up
    for augmented_file in augmented_files:
        os.remove(augmented_file)

def GetFieldsType(vectorFile):
    """ use to get field's type
    
    Parameter
    ---------
    vectorFile : string
        path to a shape file
    Return
    ------
    dict
        dictionary with field's name as key and type as value
    
    """
    from osgeo import ogr
    dataSource = ogr.Open(vectorFile)
    daLayer = dataSource.GetLayer(0)
    layerDefinition = daLayer.GetLayerDefn()
    field_dict = {}
    for i in range(layerDefinition.GetFieldCount()):
        fieldName =  layerDefinition.GetFieldDefn(i).GetName()
        fieldTypeCode = layerDefinition.GetFieldDefn(i).GetType()
        fieldType = layerDefinition.GetFieldDefn(i).GetFieldTypeName(fieldTypeCode)
        field_dict[fieldName] = fieldType.lower()
    return field_dict


def AugmentationSamples(samples, groundTruth, dataField, strategies, workingDirectory=None):
    """compute how many samples should be add in the sample set and launch data augmentation method

    Parameters
    ----------
    samples : string
        path to a vector file to augment samples
    groundTruth : string
        path to the original ground truth vector file, in order to list interger / float fields
    dataField : string
        data field's name in samples
    strategies : dict
        dictionary
    workingDirectory : string
        path to a working directory
    """

    if GetRegionFromSampleName(samples) in strategies["target_models"]:
        from collections import Counter
        class_count = Counter(fut.getFieldElement(samples, driverName="SQLite", field=dataField,
                                                  mode="all", elemType="int"))

        class_augmentation = SamplesAugmentationCounter(class_count, mode=strategies["samples.strategy"],
                                                        atleast_num=strategies.get("samples.strategy.atLeast", None),
                                                        byclass=strategies.get("samples.strategy.byClass", None))
        
        fields_types = GetFieldsType(groundTruth)

        excluded_fields_origin = [field_name.lower() for field_name, field_type in fields_types.items()
                                                     if "int" in field_type or "flaot" in field_type]
        samples_fields = fut.getAllFieldsInShape(samples, driver='SQLite')
        excluded_fields = list(set(excluded_fields_origin).intersection(samples_fields))
        excluded_fields.append("originfid")
        
        Augmentation(samples, class_augmentation, strategy=strategies["strategy"],
                     field=dataField, excluded_fields=excluded_fields,
                     Jstdfactor=strategies.get("strategy.jitter.stdfactor", None),
                     Sneighbors=strategies.get("strategy.smote.neighbors", None),
                     workingDirectory=workingDirectory)



